<?xml version="1.0"?>

<!-- ant task file used to build the value pack from maven and to put it in the uca expert kit-->
<project name="valuepack build">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<property environment="env" />


	<!-- xxxxxxxxxx -->
	<!-- PROPERTIES -->
	<!-- xxxxxxxxxx -->

	<!-- kit and project naming -->
    	<!-- Valuepack name and version -->
	<property name="project.name" value="WMT" />
	<property name="project.version" value="1.0" />

    <property name="lib.name" value="${project.name}-lib-${project.version}" />
    <property name="kit.name" value="${project.name}-vp-${project.version}" />
    <property name="vp.name" value="${project.name}-${project.version}" />

    <property name="build.dir" value="target/vp-build-dir" />
    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="generated-resources.dir" value="${build.dir}/generated-sources/xjc" />



    <!-- Junit location -->
    <property name="junit.home" value="${env.JUNIT_HOME}" />
    <!-- UCA-EBC libraries location -->
    <property name="uca-ebc.libs" value="${env.UCA_EBC_DEV_HOME}/lib"/>
    <property name="uca-ebc.configuration" value="${env.UCA_EBC_DEV_HOME}/lib/configuration"/>
    <property name="uca-ebc.schemas" value="${env.UCA_EBC_DEV_HOME}/lib/schemas"/>


    <!-- Do not change -->
    <!-- Compilation related properties -->
    <property name="optimize_mode" value="false" />
    <property name="debug_mode" value="true" />
    <property name="java_version" value="1.7" />
    <property name="encoding" value="utf-8" />



    <!-- Environment directory tree -->
    <property name="src.dir" value="src/main" />
    <property name="src-resources.dir" value="src/main/resources" />
    <property name="build.dir" value="target" />

    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="src.path" value="${src.dir}/" />
    <property name="generated-resources.dir" value="${build.dir}/generated-sources/xjc" />



    <!-- JUNIT directories-->
    <property name="test.dir" value="src/test" />
    <property name="test-resources.dir" value="src/test/resources" />
    <property name="test-classes.dir" value="${build.dir}/test" />
    <property name="test.reports" value="${build.dir}/reports" />
    <property name="reports.dir" value="reports" />

    <!-- xxxxxxxxx -->
    <!-- CLASSPATH -->
    <!-- xxxxxxxxx -->

    <!-- Third Party Products ClassPath -->
    <!-- Main Build ClassPath -->
    <path id="compiled.classpath">
        <pathelement location="${classes.dir}" />
        <pathelement location="${test-classes.dir}" />
    </path>

    <path id="test.classpath">
        <pathelement location="${test-resources.dir}" />
        <pathelement location="${src-resources.dir}" />
        <pathelement location="${src-resources.dir}/valuepack/conf" />
        <path refid="compiled.classpath" />
        <pathelement path="${test.dir}" />
        <pathelement path="${uca-ebc.libs}" />
        <pathelement path="${uca-ebc.configuration}" />
        <pathelement path="${uca-ebc.schemas}" />
        <path refid="main.classpath" />
    </path>

    <path id="uca-expert.classpath">
        <fileset dir="${uca-ebc.libs}">
            <include name="*.jar" />
        </fileset>
    </path>

    <!-- Specific library -->
    <path id="current-project.classpath">
        <fileset dir="lib" erroronmissingdir="false">
            <include name="*.jar" />
        </fileset>
    </path>
    
    <!-- Main Build ClassPath -->
    <path id="main.classpath">
        <path refid="uca-expert.classpath" />
        <path refid="current-project.classpath" />
    </path>


    <!-- xxxxxx -->
    <!-- TARGET -->
    <!-- xxxxxx -->

    <!-- Clean build directories -->
    <target name="clean" description="Clean output dirs">
        <delete dir="${build.dir}" />
    </target>

    <!-- Compile all the sources -->
    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${generated-resources.dir}" type="dir" />
        </condition>
    </target>


    <target name="compile-src" depends="dir.check, compile-including-generated" description="Compile all source code" unless="dir.exists">
        <mkdir dir="${classes.dir}" />
        <javac destdir="${classes.dir}" encoding="${encoding}" source="${java_version}" target="${java_version}" debug="${debug_mode}" optimize="${optimize_mode}" failonerror="true" includeantruntime="false">
            <src path="${src.path}" />
            <classpath refid="main.classpath" />
        </javac>
    </target>


    <target name="compile-including-generated" depends="dir.check" description="Compile all the source code" if="dir.exists">
        <mkdir dir="${classes.dir}" />
        <javac destdir="${classes.dir}" encoding="${encoding}" source="${java_version}" target="${java_version}" debug="${debug_mode}" optimize="${optimize_mode}" failonerror="true" includeantruntime="false">
            <src path="${src.path}" />
            <src path="${generated-resources.dir}" />
            <classpath refid="main.classpath" />
        </javac>
    </target>

    <!-- Junit Targets -->
    <target name="compile-tests" description="Compile all Tests Cases" unless="maven.test.skip">
        <mkdir dir="${test-classes.dir}" />
        <javac destdir="${test-classes.dir}" encoding="${encoding}" source="${java_version}" target="${java_version}" debug="${debug_mode}" optimize="${optimize_mode}" failonerror="true" includeantruntime="false">
            <src path="${test.dir}" />
            <classpath refid="test.classpath" />
        </javac>
    </target>
    
    <target name="compile" depends="dir.check, compile-src" description="Compile all (source and test) code" unless="dir.exists"/>
        

    <tstamp>
        <format property="junit.report.tstamp" pattern="yyyyMMddHHmm" />
    </tstamp>


    <target name="test" description="Run all Test Cases" depends="compile-tests" unless="maven.test.skip">
        <mkdir dir="${test.reports}" />
        <mkdir dir="${test.reports}/junit" />
        <mkdir dir="${test.reports}/junitreport" />

        <junit fork="yes" printsummary="on" showoutput="no" dir="${basedir}">

            <classpath refid="test.classpath" />
            <batchtest haltonerror="true" haltonfailure="true" errorproperty="junit.error" failureproperty="junit.failure" fork="yes" todir="${test.reports}/junit">
                <fileset dir="${test-classes.dir}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>
            <formatter type="xml" usefile="yes" />
        </junit>

        <junitreport todir="${test.reports}/junitreport">
            <fileset dir="${test.reports}/junit">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${test.reports}/junitreport" />
        </junitreport>
        <!-- Archive this report -->
        <copy todir="${reports.dir}/junit/${junit.report.tstamp}">
            <fileset dir="${test.reports}/junitreport" />
        </copy>


    </target>


    <!-- Make the java code jar file -->
    <target name="jar" description="Make the ${vp.name} project code jar file.">
        <jar jarfile="${build.dir}/${lib.name}.jar">
            <!-- ship the code -->
            <fileset dir="${classes.dir}" includes="**/*.class" />
            <!-- ship the resources -->
            <fileset dir="${src-resources.dir}" includes="**/*" />
        </jar>
    </target>


    <target name="pre-kit" description="Filtering configuration files before project packaging.">
        <!-- copy all resources into builddir deploy directory-->
        <copy todir="${build.dir}/vp/deploy/${vp.name}">
            <fileset dir="${src-resources.dir}/valuepack">
                <exclude name="**/*generated.drl"/>
            </fileset>          
        </copy>
        <copy todir="${build.dir}/vp/deploy/${vp.name}/lib" file="${build.dir}/${lib.name}.jar" />
        <copy todir="${build.dir}/vp/deploy/${vp.name}/lib">
            <fileset dir="lib" erroronmissingdir="false"/>
        </copy>

        <!-- Change path for resource files for all conf files -->
        <replace dir="${build.dir}/vp/deploy/${vp.name}/conf" token="${src-resources.dir}/valuepack/" value="deploy/${vp.name}/" />

        <!-- Change project version in configuration files and rule files-->
        <replace dir="${build.dir}/vp/deploy/${vp.name}" token="__PROJECT_VERSION__" value="${project.version}" 
            includes="**/*.xml **/*.drl"/>

        <!-- Change project name in configuration files and rule -->
        <replace dir="${build.dir}/vp/deploy/${vp.name}" token="__PROJECT_NAME__" value="${project.name}"  
            includes="**/*.xml **/*.drl"/>
    </target>

    <target name="kit" depends="pre-kit" description="Make the ${vp.name} project kit.">
        <!-- build the kit -->
        <mkdir dir="${build.dir}/vp" />
        <zip destfile="${build.dir}/vp/${kit.name}.zip">
            <!-- ship the code lib -->
            <zipfileset dir="${build.dir}/vp/deploy">
                <include name="**/*" />
            </zipfileset>
        </zip>
    </target>
    
    
    <target name="addLocalLibToClassPath" >
        <!-- local libraries must be defined with relative Path -->
        <property name="relLibpath" value="${libpath}" relative="true"/>
        <antcall target="addLibToClassPath">
            <param name="libpath" value="${relLibpath}"/>
          </antcall>
    </target>
    
    <target name="addLibToClassPath" >
        <basename property="libBasename" file="${libpath}" suffix=".jar"/>
        <echo file=".classpath" append="true" encoding="UTF-8">
    <![CDATA[   <classpathentry kind="lib" path="${libpath}">]]></echo>
            <available file="${env.UCA_EBC_DEV_HOME}/apidoc/${libBasename}-javadoc.jar" property="doc.present"/> 
            <if>
                <equals arg1="${doc.present}" arg2="true"/>
                <then>
                    <echo file=".classpath" append="true" encoding="UTF-8"><![CDATA[   
                    <attributes>
                    <attribute name="javadoc_location" value="jar:file:/${env.UCA_EBC_DEV_HOME}/apidoc/${libBasename}-javadoc.jar!/"/>
                    </attributes>]]></echo>
                </then>
            </if>   
            <echo file=".classpath" append="true" encoding="UTF-8"><![CDATA[   
        </classpathentry>]]></echo>
        </target>
        
    <target name="eclipse">
        <fail unless="env.UCA_EBC_DEV_HOME">the UCA_EBC_DEV_HOME Environment Variable is not set. Please set this variable with a correct value before launching the eclipse project creation target.</fail>

        <!-- create the .project file -->
        <propertyregex property="EBClib" input="${env.UCA_EBC_DEV_HOME}/lib" regexp="\\" replace="/" defaultValue="${env.UCA_EBC_DEV_HOME}/lib" global="true"/>
        <echo file=".project" encoding="UTF-8"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
    <name>${project.name}</name>
    <comment></comment>
    <projects>
    </projects>
    <buildSpec>
        <buildCommand>
            <name>org.eclipse.jdt.core.javabuilder</name>
            <arguments>
            </arguments>
        </buildCommand>
    </buildSpec>
    <natures>
        <nature>org.eclipse.jdt.core.javanature</nature>
    </natures>
    <linkedResources>
        <link>
            <name>UCAEBCresources</name>
            <type>2</type>
            <location>${EBClib}</location>
        </link>
     </linkedResources>
</projectDescription>]]>
        </echo>
        
        <!-- create the .class file -->
        <echo file=".classpath" encoding="UTF-8"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<classpath>
            <classpathentry kind="src" path="src/main/java"/>
            <classpathentry kind="src" path="src/test/java"/>
            <classpathentry excluding="valuepack/conf/" kind="src" path="src/main/resources"/>
            <classpathentry kind="src" path="src/main/resources/valuepack/conf"/>
            <classpathentry kind="src" path="src/test/resources"/>
            <classpathentry excluding="**/.jar" kind="src" path="UCAEBCresources"/>]]>
        </echo>
        <foreach param="libpath" target="addLocalLibToClassPath">
            <path>
                 <fileset dir="./lib" includes="*.jar" />
            </path> 
        </foreach>
        <foreach param="libpath" target="addLibToClassPath">
            <path>
                <fileset dir="${env.UCA_EBC_DEV_HOME}/lib" includes="*.jar" />
            </path> 
        </foreach>
        <echo file=".classpath" append="true" encoding="UTF-8">
<![CDATA[   <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
            <classpathentry kind="output" path="target/classes"/>
</classpath>]]></echo>
        <echo  message="eclipse project build successfuly!"/>
    </target>
    
    <target name="package" depends="jar, kit" />
    
    <target name="all" depends="clean, compile, test, package" description="Clean and rebuild all" />

    <target name="usage">
        <echo level="info" message="" />
        <echo level="info" message="${ant.project.name}" />
        <echo level="info" message="---------------" />
        <echo level="info" message="" />
        <echo level="info" message="Among the available targets are:" />
        <echo level="info" message="" />
        <echo level="info" message="clean         --> clean all built files" />
        <echo level="info" message="compile       --> compile sources and test code" />
        <echo level="info" message="test          --> run tests" />
        <echo level="info" message="package       --> build package" />
        <echo level="info" message="all           --> clean, compile, test, package" />
        <echo level="info" message="" />
        <echo level="info" message="eclipse       --> build eclipse project files" />
        <echo level="info" message="" />
    </target>

</project>
